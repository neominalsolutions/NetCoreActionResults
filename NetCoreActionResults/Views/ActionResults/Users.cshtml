
@{
    ViewData["Title"] = "Users";
}

@model List<UserViewModel>

<h1>Users</h1>

<hr />

@*Javascipt ile form gönderme AJAX*@
<form id="frm" novalidate onsubmit="SendUserAjax(event)" method="post">
<label>Email</label>
<input id="emailInput" class="form-control" type="text" name="Email" />
<label>UserName</label>
<input id="usernameInput" class="form-control" type="text" name="UserName" />
<br />
<button type="submit" class="btn btn-success">JSON Ekle</button>

</form>
<br />
<ul id="liste" class="list-group">
  @foreach (var item in Model)
  {
    <li class="list-group-item">
      @item.UserName
    </li>
  }
</ul>

<br />
<button class="btn btn-primary" onclick="SendUser()">User Bilgilerini Post Et</button>

<!-- veri gönderme işleminde eğer contentType bilgisini berlirtmez isek json xml tipinde istek yaptığımız bilgisi bu durumda 415 hata kodu alırız. -->

@section Scripts {
  <script>

    function SendUserAjax(event){
        event.preventDefault(); // formun post edilmesini engelledik. post back olmayı engeller.

        console.log('event', event);

        const data = {
            //Email: $('#emailInput').val(),
            //UserName: $('#usernameInput').val()
        };
        // $ keyword ile Jquery kütüphanesine bağlandık. Jquery kütüphanesi üzerinden $.ajax ile json result ile çalışmış olduk.

        //console.log('frm',$(event).serializeArray());

        const formData = $('#frm').serializeArray();

        console.log('formData', formData);

        $.each(formData,(index,item) => {
            console.log('key', index);
            console.log('value', item);
            data[item.name] = item.value;
        })

        console.log('data', data);

        // AJAX ile post ederken action içindeki modelden önce bodyden gönderildiğini söylemek için [FromBody] yazalım.

        $.ajax({
          method:'POST',
          url:'/json-result',
          contentType:'application/json',
          data: JSON.stringify(data),
          success:(response) => {
            console.log('response', response);

            //$"{}"
                if (response.isSucceded) {
                  // backtick
                  $('#liste').append(`<li class='list-group-item'>${data.UserName}</li>`);
                    //$('#emailInput').val('');
                    //$('#usernameInput').val(''); // boş bırakalım
                    $('#frm').trigger('reset');
                }
          },
          error:(err) => {
            console.log('hata', err);
          }
        })
    }

    function SendUser(){
         var data = { UserName: 'ali', Email: 'test@test.com' };

         console.log('data', data);
    

    fetch('/json-result', { method:'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            data: JSON.stringify(data) })
    .then(response => {
      // isteğin başarılı sonuçlandığında çalışacak olan fuction
      console.log('response', response);

      return response.json(); // gönderilecek olan değeri json formatına dönüştür.

    })
    .then(data => {
      // json formatına dönüşmüş hali yakalanır. mvcden dönen mesajı yakalarız.
      console.log('data', data)

                alert(data.message)
    })
    .catch(function(err) {
      // istek hatalo olduğunda çalışacak function
            console.log('error', err);
    })
    }

    //function onError(error) {

    //}

  </script>
}

